//! `SeaORM` Entity, @generated by sea-orm-codegen 1.0.0

use sea_orm::entity::prelude::*;

#[derive(Clone, Debug, PartialEq, DeriveEntityModel, Eq)]
#[sea_orm(table_name = "junction")]
pub struct Model {
    #[sea_orm(primary_key)]
    pub id: i32,
    pub value: String,
    pub sample_e_id: i32,
    pub sample_f_id: i32,
}

#[derive(Copy, Clone, Debug, EnumIter, DeriveRelation)]
pub enum Relation {
    #[sea_orm(
        belongs_to = "super::sample_e::Entity",
        from = "Column::SampleEId",
        to = "super::sample_e::Column::Id",
        on_update = "NoAction",
        on_delete = "NoAction"
    )]
    SampleE,
    #[sea_orm(
        belongs_to = "super::sample_f::Entity",
        from = "Column::SampleFId",
        to = "super::sample_f::Column::Id",
        on_update = "NoAction",
        on_delete = "NoAction"
    )]
    SampleF,
}

impl Related<super::sample_e::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::SampleE.def()
    }
}

impl Related<super::sample_f::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::SampleF.def()
    }
}

impl ActiveModelBehavior for ActiveModel {}
